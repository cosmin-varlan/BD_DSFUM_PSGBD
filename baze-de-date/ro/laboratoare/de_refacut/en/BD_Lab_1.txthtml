<p><b>Objectives:</b></p>
<p><ul></p>
<p><li>Understanding the relational model for databases</p>
<p><li>An overview of the SQL language</p>
<p></ul></p>



<h2> The relational model </h2>
<ul>
<li> is a simple model with efficient implementations and with a simple and expressive query language (SQL);  </li>
<li> proposed in '70s by Edgar Frank Codd, it is used by the most popular DBMSs: http://db-engines.com/en/ranking_trend.</li>
</ul>


<p>Features:</p>
<ul>
<li> The database consists of a set of tables/relations;</li>
<li> Every table/relation has a unique name in the database it belongs to and contains a set of columns/attributes/fields; </li>
<li> Every attribute has a unique name in the table it belongs to and can take values to a specific domain it is associated to;</li>
<li> Every line/record/tuple in a table has values for each attribute of the table (there are no missing values, when a value does not exist the NULL value is filled in);</li>
<li> The order of the lines/tuples does not matter.</li>
</ul>


<p><b>The schema of the database </b> is actually its structural description: table names and table definitions (attributes and associated types).</p>

<p><b>A database instance</b> represents the content of the database at a given time.</p>

<p><b>NULL</b> – is a special value used when we do not know an attribute value for a given record.</p>

<p><b>Candidate key</b> – an attribute which takes unique values for every row in the table </p>
<p>- or a set of attributes whose combination of values are unique (uniquely identifies each record in the table), minimal with regard to this property (by excluding any attribute from this set we cannot uniquely identify each tuple); by adding any other attribute to a candidate key we obtain a <b>super-key</b>.</p>

<p><b>Primary key</b> – one of the candidate keys, designated to act as the main key for identifying the records; none of its attributes can be NULL.</p>

<p><b>Alternate key</b> – any candidate key, not designated as primary. </p>

<p><b>Foreign key</b> – an attribute or a set of attributes in a relation that references a candidate key in other table (or even in the current table, case which corresponds to a <b>recursive foreign key</b>). </p>

<p>Information is extracted from the database by using queries wirtten in SQL. The result of a query is also structured as a table.</p>

<p><b>Relational algebra</b></p>
<ul>
<li> A formal language</li>
<li> Basic operators: selection, projection, cartesian product, intersection, difference, renaming</li>
<li> Based on sets and not bags (duplicates are eliminated)</li>
</ul>


<h2> The SQL language</h2>
<p>SQL - Structured Query Language</p>
<ul>
<li> the language used to manipulate relational databases</li>
<li> a declarative language: expresses WHAT one wants and NOT HOW one obtains it</li>
<li> a language that implements the operators of the relational algebra (its semantics is defined by the relational algebra) but based on multi-sets/bags (in a relation there may exist duplicates)</li>
<li> although considered a non-procedural language, most RDBMSs offer procedural extensions.</li>
</ul>


<p>The SQL language was standardized for the first time by ISO in 1987. Since then, the language was subject to many changes/improvements (called revisions), the latest stable version being SQL:2016.</p>

<p>Although standardized at international level, every DBMS provider deviated from and extended the standardized version to offer some advantages. Because of its large size, some providers did not implement all the features present in the standard. On the contrary, there might be the case that the standard has not defined some behaviors, the decisions being left to developers. In these situations there exist today <i>SQL dialects</i>. This phenomenon leads to incompatibilities between various relational DBMSs. Some incompatibilities may be preserved on purpose in order to retain gained customers. </p>

<p>The Oracle's conformance claims can be accessed at [[https://docs.oracle.com/database/121/SQLRF/ap_standard_sql003.htm#SQLRF55516|[https://docs.oracle.com/database/121/SQLRF/ap_standard_sql003.htm#SQLRF55516]]</p>

<p>In the following we list the most popular SQL commands, using Backus-Naur syntax where: </p>
<ul>
<li>	<>		corresponds to a substitution variable</li>
<li>	|  		signifies disjunction</li>
<li>	[…]		contains optional items</li>
<li>	{…|…|…}	        forces the user to choose exactly one item from the list</li>
</ul>


<h3> DDL (Data Definition Language) </h3>

<h4> Creating tables </h4>
<pre><code class="language-sql">CREATE [{GLOBAL | LOCAL} TEMPORARY] TABLE
       <table_name>
        (<column_name1> {data_type | domain_name} [constraints] 
        [,<column_name2> {data_type | domain_name} [constraints]]
        […]
        )     
       [ ON COMMIT { DELETE | PRESERVE } ROWS ]
</code></pre>



<p>The TEMPORARY option creates a temporary table, which stores records only during a transaction (until a COMMIT command is triggered), or during a session (in case ON COMMIT PRESERVE ROWS option is used). In Oracle we have only GLOBAL temporary tables: the definition of the temporary table is available from all the sessions but the access to data is private (the records inserted in one session can be accessed only from that session). </p>


<h4> Deleting tables </h4>
<pre><code class="language-sql">DROP TABLE <table_name>  [RESTRICT | CASCADE]
</code></pre>

<p>CASCADE forces dropping a table which is referenced by a view or by other foreign keys, propagating the drop command on these objects.</p>

<p>In Oracle a table is dropped using:</p>
<pre><code class="language-sql">DROP TABLE <table_name>  [CASCADE CONSTRAINTS] [PURGE]
</code></pre>


<p>In Oracle the tables are recycled, unless the PURGE option is specified. They can be restored by using:</p>
<pre><code class="language-sql">FLASHBACK TABLE <table_name>   TO 
     { { SCN | TIMESTAMP } expr 
     [ { ENABLE | DISABLE } TRIGGERS ] | 
     BEFORE DROP [ RENAME TO <nume_nou> ]} 
</code></pre>


<h3> DML (Data Manipulation Language) </h3>

<h4> Inserting records </h4>
<pre><code class="language-sql">INSERT INTO <table_name> 
            [ (columns_list) ]
            VALUES (values_list)
</code></pre>


<h4> Updating records </h4>
<pre><code class="language-sql">UPDATE <table_name>
       SET <column_name1> = value1
           [, <column_name2> = valoare2...]
       [WHERE condition]
</code></pre>


<h4> Deleting records </h4>
<pre><code class="language-sql">DELETE FROM <table_name> 
      [WHERE condition]
</code></pre>



<h4> Querying the database </h4>
<pre><code class="language-sql">SELECT [DISTINCT | ALL] {* | [column_expresion [AS <new_name>]] [,...] }
       FROM <table_name> [alias] [, ...]
       [WHERE condition]
       [GROUP BY columns_list] [HAVING condition]
       [ORDER BY exp1 [ASC/DESC] [,exp2...]] 
</code></pre>


<h2> Datatypes in Oracle </h2>
<p>{| border="1" </p>
<p>|Type	</p>
<p>|Properties</p>
<p>|-</p>
<p>|CHAR(n)	</p>
<p>|Strings of fixed length n (1 character is stored on 1 byte). If the string inserted by the user is shorter, the system inserts blanks at the end of the string; if the string to be inserted is longer, an error is triggered (VALUE_ERROR)</p>
<p>|-</p>
<p>|VARCHAR2(n)	</p>
<p>|Strings of variable length, n is the maximum length. It should be used when the values to be inserted differ largely with regard to their length, because it allocates a number of bytes equal to the length of the inserted string. </p>
<p>|-</p>
<p>|NUMBER	</p>
<p>|Stores numbers in range (-10126,  10126), infinity (positive şi negative).</p>
<p>|-</p>
<p>|NUMBER(n1, n2)	</p>
<p>|Numbers with a total of n1 significant digits, n2 specifying the number of digits from the decimal point to the least significant digit. Ex. for NUMBER(5,-2), introducing 12345 generates 12300 while for 12399 generates 12400.</p>
<p>|-</p>
<p>|DATE	</p>
<p>|A moment in time, storing the year, month, day, hours, minutes and seconds. </p>
<p>|-</p>
<p>|LOB (large object):<br/>BLOB, CLOB, NCLOB, BFILE	</p>
<p>|Allows storing unstructured data like text, images, videos...</p>
<p>|}</p>

<p>For compatibility with other systems, Oracle offers support for other types as well: decimal, integer, smallint, real; however, their internal representation is defined based on the number type.</p>

<p>A complete list can be accessed at [[http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/sql_elements001.htm | http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/sql_elements001.htm]]</p>

<p><b>NULL</b> is a special value indicating missing information. Both tests NULL=NULL and NULL<>NULL return FALSE. Testing for the NULL value must be done with IS [NOT] NULL.</p>

<h2>The database schema - a case study</h2>
<p>Propose a schema for a database that stores information about students (ID, first name, last name, year of study, group, scholarship, date of birth), teachers (id, first name, last name, academic title), courses (ID, title, year, semester, credits) and students' grades. Write SQL commands to create the tables, insert a few records make some updates. Query the database.</p>


<p>We thought at this exercice to be solved like this: https://profs.info.uaic.ro/~vcosmin/BD/faculty.sql</p>

<p>Save this file in the C:/temp folder, and install our version of the database by running this command in the SQLPlus application: <code>@ C:/temp/faculty.sql</code>.</p>
