
<p>= Dictionar de date =</p>

<p>https://docs.oracle.com/cd/B10501_01/server.920/a96524/c05dicti.htm#326</p>

<p>https://docs.oracle.com/cd/E11882_01/server.112/e40540/datadict.htm#CNCPT2140</p>

<p>Textul acestui laborator a fost conceput de Cosmin Poenaru.</p>

<p>Dictionarul de date este reprezentat de o multime de tabele si viewuri care furnizeaza un ghid de referinta read-only, despre baza de date.</p>
<p>Acesta este una dintre cele mai importante parti ale unei baze de date; unele dintre informatiile pe care le puteti afla din dictionar sunt: numele utilizatorului oracle, numele tabelelor, view-urilor, indecsilor, constrangerile, cine a accesat/actualizat anumite obiecte etc.</p>
<p>Dictionarul de date este creat odata cu baza de date (la apelul CREATE DATABASE) si este actualizat in timp real.</p>

<p>Conform oracle, dictionarul de date are 3 utilizari primare:</p>
<ul>
<li> oracle acceseaza dictionarul de date pentru a gasi informatii despre useri, obiecte, structuri</li>
<li> oracle modifica dictionarul de date de fiecare data cand o instructiune DDL e folosita</li>
<li> orice utilizator oracle poate folosi dictionarul de date ca pe o referinta read-only pentru informatii despre baza de date</li>
</ul>


<p>Datele din tabelele de baza din dictionarul de date sunt necesare pentru ca oracle sa functioneze. Astfel, doar oracle ar trebui sa scrie sau sa modifice informatiile din dictionarul de date.</p>

<p>Dictionarul de date mai contine si:</p>
<ul>
<li> definitiile pentru toate obiectele, cu tot cu valorile predefinite pentru coloane si informatii despre integritatea constrangerilor;</li>
<li> spatiul alocat pentru obiecte si spatiul folosit de catre obiecte;</li>
<li> numele utilizatorilor bazei de date, privilegii (permisiuni) si roluri;</li>
</ul>


<p>Dictionarul de date contine tabele de baza (tinute intr-un format criptat, contin informatii despre baza de date) si view-uri (informatii folositoare, pe care le-am mentionat mai sus)</p>
<p>Pentru a cere informatii din dictionar, se vor folosi declaratii de tipul SELECT. </p>

<p>Exista 3 prefixe pentru termenii din dictionarul de date:</p>
<ul>
<li> USER_... (folosit pentru a vedea ce este in schema utilizatorului); Exemplu: </li>
</ul>


<p> <nowiki>SELECT * FROM USER_OBJECTS -- va afisa informatiile prezente in dictionar despre obiectele utilizatorului.</nowiki></p>
<pre><code class="language-sql">* ALL_... (pentru a vedea ce poate accesa un utilizator); Exemplu: 
 <nowiki>SELECT * FROM ALL_OBJECTS - va afisa toate informatiile prezente in dictionar despre toate obiectele accesibile utilizatorului (chiar daca nu sunt ale acestuia)
</code></pre>

<ul>
<li> DBA_... (ce este in schemele tuturor utilizatorului, folosit doar de catre administratori); Exemplu: </li>
</ul>


<p> <nowiki>SELECT * FROM SYS.DBA_OBJECTS - va afisa informatiile prezente in dictionar despre toate obiectele din baza de date, indiferent de nivelul de acces sau de creator.</nowiki></p>

<p><span style="color:red">Atentie! Nu toate view-urile au 3 membrii, USER, ALL si DBA! De exemplu, pentru DBA_LOCK nu exista si ALL_LOCK!</span></p>
<p><span style="color:red">Atentie! Exista cateva view-uri care nu sunt prefixate, cum ar fi DICTIONARY, DICT_COLUMNS s.a.</span></p>


<p>Pentru a vedea toate obiectele dictionarului accesibile utilizatorului, se poate rula query-ul </p>
<pre><code class="language-sql">
Cateva exemple utile pentru dictionar:
* ALL_CATALOG - Toate tabelele si views-urile
* ALL_INDEXES - Descrierea indecsilor pe tabele
* ALL_OBJECTS - Toate obiectele
* ALL_TABLES - Toate tabelele
* USER_TABLES - Toate tabelele utilizatorului
* USER_SOURCE - Codul sursa al obiectelor stocate ale utilizatorului.
* USER_DEPENDENCIES - Toate dependentele utilizatorului.

O lista completa cu views-urile introduse in Oracle 11g o puteti gasi aici: https://anargodjaev.files.wordpress.com/2013/09/oracle-database-11g-the-complete-reference.pdf (capitolul 45)

== Tabela DUAL ==
Este o tabela ce contine o singura coloana, 'DUMMY' si un singur rand, 'x'. Aceasta este folosita pentru a garanta un rezultat constant pentru programele utilizatorilor, folosind SELECT. Tabela DUAL face parte din dictionarul de date.
Exemplu:
 <nowiki>SELECT (1+2+3+4)*128/12 FROM DUAL;
</code></pre>


<h2> SINONIME </h2>
<p>Oracle Database creaza sinonime publice pentru view-urile din dictionarul de date, pentru ca acestea sa poata fi accesate mai usor. Totodata, aceste sinonime pot fi create si de catre administratori. De exemplu, pentru DICTIONARY exista sinonimul DICT, deci in loc de </p>
<pre><code class="language-sql">, se poate rula 
 <nowiki>SELECT * FROM DICT;
</code></pre>


<p>Pentru a vedea o lista cu toate sinonimele, se poate rula query-ul</p>
<pre><code class="language-sql">
DICT_COLUMNS are 3 coloane: Table_Name, Column_Name si Comments. De exemplu, daca vrei sa vezi informatii despre spatiul alocat si folosit pentru baza de date si nu esti sigur ce view-uri sa folosesti, poti folosi DICT_COLUMNS, ca mai jos:
Totodata, pot fi facute query-ul pentru a vedea coloanele din dictionar folosind view-ul DICT_COLUMNS. Acesta afiseaza si comentariile introduse in baza de date pentru view-urile din dictionarul de date.	
 <nowiki>SELECT Table_Name FROM DICT_COLUMNS WHERE Column_Name = 'BLOCKS' AND Table_Name LIKE 'USER%';
</code></pre>



<h2> Diverse si interesante </h2>
<pre><code class="language-sql"><nowiki>SELECT MONTHS_BETWEEN(EXPIRY_DATE, CREATED) FROM USER_USERS;
</code></pre>


<h2> INDECSI ==</h2>
<p>Pentru indecsi, se poate folosi USER_INDEXES, care este grupat in 4 categorii: identificate, spatiu, statistici si altele.</p>
<p>Totodata, se poate determina care coloane sunt intr-un index folosind USER_IND_COLUMNS. Coloanele valabile cu acest view sunt urmatoarele: Index_Name, Table_Name, Column_Name, Column_Positon, Column_Length, Char_Length, Descend.</p>


<h2> Exercitiu </h2>

<p>Intr-un cod PLSQL sa se realizeze statistici la nivel de utilizator despre obiectele create(tabele, view, indecsi, type, package, </p>
<p>proceduri sau functii) utilizand dictionarul de date. </p>
<p>Se vor afisa pentru fiecare tip in parte ce obiecte a creat utilizatorul, si pentru fiecare obiect in parte se vor afisa informatii specifice. De exemplu pentru un tabel se vor afisa numele, cate inregistrari are, daca are constrangeri, indecsi si care sunt acestia, tipul de constrangere si coloanele implicate, daca este </p>
<p>nested table, iar pentru o functie, de exemplu, numele, nr de linii de cod, daca este determinista.</p>

<p>== Tema ==</p>

<p>Sa se realizeze doua aplicatii-exemplu prin care sa se demonstreze cum se face SQL injection: Prima aplicatie va permite SQL injection, a doua va rezolva aceasta problema.</p>
 

<p><!--</p>

<h2> EXERCITII </h2>

<p>1. (5pt) Sa se realizeze un script care sa determine toate dependentele functionale si multivaluate existente in tabelele utilizatorului care ruleaza scriptul. Aceste dependente vor fi afisate in consola (de exemplu: nume->prenume sau bursa->>data_nastere. Poti sa reezi slidurile 36 si 51 de aici: https://profs.info.uaic.ro/~vcosmin/pagini/resurse_bd/curs_bd_ro.pdf ). Creati un tabel in care sa aveti astfel de dependente (in caz ca nu gasiti).</p>

<p>2. (2pt) Sa se realizeze un script care sa afiseze cate linii de cod PLSQL a scris un student in acest semestru (cate linii de cod au adunate toate functiile si procedurile din acest semestru).</p>

<p><!--</p>
<p>3. (4pt) Final Exporter: Sa se realizeze o procedura care sa exporte intr-un fisier in format SQL, totul: tabele, constrangeri, proceduri, functii, triggere, viewuri, tipuri de date, obiecte, pachete etc.</p>


<p>Nota: nu aveti decat 7 puncte in acest laborator dar in urmatorul veti recupera restul de 3 puncte avand o problema care valoreaza 15 puncte. Pentru aceasta problema nu trebuie sa studiati nimic suplimentar, nu aduce nici un element nou ci doar este mai mult de lucru. Deadlineul pentru ambele laboratoare este 31.05.2018</p>
<p>--></p>
