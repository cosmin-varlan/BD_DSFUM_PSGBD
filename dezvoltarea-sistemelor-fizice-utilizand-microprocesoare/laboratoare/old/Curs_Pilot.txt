== '''Ce este un System on a Chip? (SoC)''' ==

Piesele de baza in electronica sunt rezistenta, dioda, tranzistorul, condensatorul - nu neaparat in ordinea aceasta. Fiecare are un rol bine definit si pe care le putem pune unele langa altele pentru a construi un radio (de exemplu) sau un circuit care sa aprinda automat un bec atunci cand lumina zilei a scazut sub un anumit prag. Am putea construi si chestiuni mult mai complexe cum ar fi de exemplu un calculator (de buzunar) insa pentru acest lucru ar trebui sa punem atat de multe astfel de piese unele langa altele incat chiar daca am folosi cele mai mici tranzistoare pe care le-am gasi pe piata, tot am avea nevoie de suprafete imense.

Eforturi de reducere a acestor suprafete se fac in fiecare an si, putem spune cu mandrie ca, cercetatorii de la Intel au reusit sa faca tranzistoare atat de mici incat diametrul lor este echivalentul a 28 de atomi de siliciu (in tranzistoare siliciu este substanta cea mai importanta). Totusi, cand discutam despre astfel de tranzistoare, este clar ca nu mai avem cum sa le utilizam direct la nivel fizic, ele fiind imposibil de lipit pe o placa de baza, oricat de priceput ar fi un electronist. Tranzistorii sau piesele atat de mici nu pot fi puse in circuite decat de roboti specializati pentru a face acest lucru. Daca va intereseaza cam cati tranzistori sunt in diverse procesoare de-a lungul timpului, numarul acestora il puteti gasi [https://en.wikipedia.org/wiki/Transistor_count aici]. Spre exemplu, intr-un procesor Quad-core + GPU GT2 Core i7 Skylake K se gasesc 1.750.000.000 tranzistoare, fiecare avand o dimensiune de 14 nano-metri (si tineti cont ca diametrul atomului de siliciu este de 0.5 nano metri). Calculati singuri ce suprafata ati avea nevoie daca ati folosi - sa zicem - tranzistori cu suprafata de 1mm patrat - deci intr-un centrimetru patrat v-ar incape cam 100 de tranzistoare, in 10cm patrati cam 10.000, intr-un metru patrat cam 1.000.000 - si ati avea un procesor cat masa (deja). Deci probabil ca v-ar trebui cam 1750 de mese ca sa faceti tot procesorul. 

Dar ca sa nu fim pesimisti, vom folosi ceea ce deja exista - procesoare construite de japonezi care au fost in stare sa construiasca roboti care sa le lipeasca tranzistorii aia pe suprafete atat de mici incat noi sa putem tine un i7 in mana azi.

Am discutat despre procesoare pentru ca toti ati auzit de ele. Totusi, aceste piese de baza de care discutam pot fi utilizate pentru a face fel si fel de componente electronice: de exemplu memoria RAM sau un controller care ii zice unui PC ce tasta a fost apasata la tastatura cu care scriu aceste randuri. Sa concluzionam ca aceste piese ce sunt construite cu mai multe piese de baza si care sunt utilizate intr-un anumit scop se numesc cipuri (engl: chip). 

<p>In timp ce unele chipuri sunt specializate doar pentru a face o singura operatie toata viata lor, altele au fost construite in asa fel incat comportamentul lor sa poata fi definit prin intermediul unui program pe care un utilizator l-ar putea scrie. Astfel sunt si cipurile ATMEL (a carei familie este destul de mare pentru a o enumera aici dar pe care o puteti gasi la http://www.atmel.com/products/microcontrollers/avr/megaavr.aspx). Chipurile ATMEL sunt cele care stau la baza constructiei a ceea ce numim astazi ARDUINO si care nu este altceva decat o platforma care utilizeaza un microcprocesor de tip ATMEL (unul din lista precedenta). </p>

<p>Cipurile ATMEL fac parte dintr-o familie mai larga de cipuri denumite System on a Chip (sau simplu SoC). Alte exemple includ: procesorul de la Raspberry pi, procesoarele de tip A7, A9 sau ce procesor mai nou are telefonul vostru etc. Ce inseamna System on a Chip ? destul de simplu: tot ce tine de parte componenta a unui calculator: Procesor, RAM, HDD, magistrale de date, porturi de intrare/iesire, sisteme de intrerupere, watch dogs, etc. sunt toate asezate in acelasi circuit integrat (ATMEL in cazul nostru). Nu este important pentru noi in acest moment sa stim mai multe despre aceste lucruri (dar le veti putea studia la un curs specializat daca veti da la Facultatea de Informatica), deocamdata ce ne intereseaza este ca putem scrie un program care sa il incarcam in acest cip si pe care cipul sa il execute pentru a face diverse lucruri.</p>

<p>Avantajul unui astfel de cip fata de un PC normal? Dimensiunea (fizica) mai mica si costul redus. Din acest motiv ele sunt incorporate in multe device-uri cu care interactionam in viata de zi cu zi, poate fara sa ne dam seama. Astfel de cipuri sunt folosite si pentru roboti...(prezentarea robotului line follower)</p>


<p>In cursurile noastre, vom folosi placutele de dezvoltare Arduino. Acestea sunt usor de folosit si programat si ofera o interfata prietenoasa, ceea ce le face potrivite pentru incepatori si placut de folosit pentru cei experimentati. Ca sa putem folosi Arduino, mai intai vom studia structura si sintaxa limbajului. Veti observa multe asemanari cu C++.</p>

== '''Despre Arduino''' ==

Pe placuta Arduino putem observa microcontrolerul (in centru), port-urile de alimentare si, probabil cel mai evident, pinii.

Pe placuta Arduino exista diverse tipuri de pini. Pentru proiectele noastre, vom folosi in principal pinii digitali (marcati cu numere), pinii analogici (marcati cu A) si pinii de alimentare sau impanatare (5V, GND). Diferenta intre aceste tipuri de pini o vom explora in cursul urmator.

Pentru programarea placutelor Arduino, vom folosi mediul de programare oficial, pe care il puteti descarca la adresa [https://www.arduino.cc/en/Main/Software aceasta].

Prezentarea mediului de programare...

Probabil cea mai evidenta diferenta intre limbajul Arduino si C++ este structura programelor.

Limbajul Arduino are doua componente esentiale, anume functia '''setup()''' si functia '''loop()''', spre deosebire de C++ care are functia main().
Functia '''setup()''' este apelata o singura data, la pornirea programului (adica in momentul in care alimentam Arduino). Trebuie sa fie inclusa in program chiar daca nu contine nici o instructiune.
Dupa '''setup()'''
, este apelata functia '''loop()''' care, dupa cum sugereaza si numele, se comporta ca o bucla infinita (echivalentul unui while(1) ). Aceasta va executa instructiunile din cadrul sau la nesfarsit.

Tipurile variabilelor (int,bool,long,float,double, etc), operatiile aritmetice (+, -, /, *), operatorii de comparatie (>, >=, <, <=), operatorii logici (||, &&, !) si instructiunile de control (if, for, while, do..while) sunt la fel ca si in C++ (sau Java).



Vom trece in revista cateva dintre functiile esentiale ale limbajului Arduino:
<ul>
<li>
<b>pinMode(pinNumber, mode):</b>Functie folosita in void setup() pentru a face ca un pin sa se comporte ca '''INPUT''' sau ca '''OUTPUT'''. Pinii de tip INPUT sunt de regula folositi pentru citirea datelor, in timp ce pinii de tip OUTPUT sunt folositi pentru a transmite curent (pana in 40 miliamperi) dispozitivelor sau circuitelor. Asta este destul curent pentru a aprinde LED-uri sau a alimenta senzori de baza, insa pentru componente mai avansate este posibil sa nu fie suficient.
</li>
<li>
<b>digitalRead(pinNumber):</b>Functie ce citeste si returneaza valoarea de pe pinul dat ca argument. Valoarea este una digitala (adica 0 sau 1).Pinul poate fi specificat fie ca variabila, fie ca si constanta.
</li>
<li>
<b>digitalWrite(pinNumber):</b>Seteaza pinul dat ca argument fie pe HIGH, fie pe LOW. (cand un pin digital este pe HIGH acesta transmite curent)
</li>
<li>
<b>delay(ms):</b>Opreste executia programului pentru numarul de milisecunde specificat. (1000 ms = 1 s)
</li>
<li><b>Continuare la cursul urmator...</b>
</li>
</ul>

<p>Placuta Arduino are integrata pe pinul nr 13 un LED. Acesta poate fi aprins folosind urmatoarea secventa de cod:</p>
 <nowiki>void setup(){
  // initializam pinul 13, adica pinul pe care se afla LED-ul, ca OUTPUT
  pinMode(13, OUTPUT);
}
void loop() {
  digitalWrite(13, HIGH);   // deschidem LED-ul (HIGH este nivelul voltajului)
  delay(1000);              // asteptam o secunda
  digitalWrite(13, LOW);    // inchidem LED-ul prin setarea voltajului pe LOW
  delay(1000);              // mai asteptam o secunda
}
</nowiki>

Copiati aceasta secventa de cod in mediul de programare Arduino. Apoi, la Tools->Board asigurati-va ca este selectata placa pe care o folositi (la cursurile noastre folosim Arduino Mega), si la Tools->Port asigurati-va ca ati selectat portul corespunzator. Daca PC-ul nu vede portul la care este conectat Arduino, asigurati-va ca e conectat cum trebuie sau daca ati instalat driverele corect. (in cazul in care sunteti pe Windows)

 
Experimentati cu diferite valori ale delay-ului (eventual cu un for, etc.).
