== Carduri de memorie ==

Cardurile de memorie se pot regasi pe diverse shielduri atasabile arduino-ului, in general cele ce necesita mai multe date pentru a functiona corect, date ce nu pot fi generate de catre placa Arduino.
Iata cateva proiecte interesante ce pot fi facute cu ajutorul cardurilor de memorie (poate va inspiram):

* Server web - in care fisierele HTML sa nu fie generate de catre Arduino ci sa fie stocate pe card. Eventual acestea pot fi modificate pe alocuri cu valori obtinute de la diversi senzori conectati la Arduino. Cum shieldurile Ethernet au un astfel de cititor de carduri MicroSD, realizarea unui astfel de proiect este super usoara.
* Stocarea de imagini - majoritatea ecranelor au si un astfel de cititor de carduri. Pe el pot fi stocate imagini ce vor fi afisate pe ecran sau puteti sa generati imagini (in cazul in care ecranul are si o componenta tactila) pe care sa le stocati pe card.
* Salvarea de fisiere de tip log - pentru a face diverse statistici referitoare la valorile senzorilor conectati.
* Stocarea de melodii (genul celor facute la [[Cel cu sunetul in casti]]) si redarea lor pe dispozitive cum ar fi casti sau alte chiar boxe)
* Salvarea starii curente a Arduinoului pentru a relua dintr-un anumit punct taskul curent (de exemplu stocarea starii unui joc pe care acesta il joaca cu partenerul uman).

Evident ca exemplele pot continua.



== Utilizarea cardului SD ==

Comunicarea cu cardul SD se face tot prin protocolul SPI despre care ati invatat in [[Cel cu matricea de LEDuri]]. De aceasta data insa, pentru selectarea cardului pinul ce trebuie sa fie setat pe low (pinul SS) este pinul 4 in cazul cardurilor de pe shieldul Ethernet sau pinul 10 in cazul cardurilor de pe ecranele cu card.  Puteti reciti sectiunea "Comunicarea SPI" din laboratorul [[Cel cu matricea de LEDuri]] pentru a va reaminti cum functioneaza comunicarea de tip SPI.

Biblioteca "oficiala" dedicata lucrului cu cardurile SD se gaseste la adresa: https://www.arduino.cc/en/Reference/SD. Totusi, aceasta bibloteca are unele greseli de implementare, greseli pe care le-am descoperit de-a lungul timpului si din acest motiv nu o recomandam. In locul acesteia, vom utiliza va rugam sa descarcati (utilizand meniul Tools -> Manage Libraries) biblioteca dezvoltata de Adafruit: "sdFat - Adafruit fork".

Biblioteca permite citirea si scrierea fisierelor pe cardul MicroSD daca acestea sunt formatate FAT16 sau FAT32. Ca o reminiscenta a FAT16, fisierele ce pot fi scrise/citite pot avea doar 8 caractere in nume si o extensie de maxim 3 caractere. In cazul in care pe card aveti fisiere care depasesc aceasta dimensiune ele vor fi indexate cu ~nr. De exemplu, daca aveti un fisier "THEUNForgiven2.MP3" biblioteca il va vedea ca si "THEUNF~1.MP3".

La adresa: https://www.arduinolibraries.info/libraries/sd-fat-adafruit-fork puteti gasi biblioteca de mai sus (in caz ca nu ati putut sa o descarcati cu IDEul). In directorul "extras" veti gasi informatii despre fiecare functie disponibila in acesasta biblioteca, pagina web respectiva fiind dezarhivata si aici:  https://profs.info.uaic.ro/~vcosmin/pagini/resurse_arduino/ImagineCardSD/extras/html/index.html

Lista tuturor claselor ce pot fi instantiate si utilizate pentru manipularea cardului SD se regaseste aici:
https://profs.info.uaic.ro/~vcosmin/pagini/resurse_arduino/ImagineCardSD/extras/html/annotated.html

== Descarcati imaginea pentru card ==

<span style="font-weight:bold; background-color:yellow"> Descarcati imaginea cardului de [https://profs.info.uaic.ro/~vcosmin/pagini/resurse_arduino/ImagineCardSD/arduino_card.zip aici]. </span> 

Dezarhivati direct in radacina unui card formatat FAT32 sau FAT16 si sa incercam cateva exemple (inspirate din biblioteca mentionata mai sus).

== Cod - Exemplu ==

Pornim acest exemplu (ce se va face incremental) cu "baza" - initializarea portului serial si a cardului:

<source lang="c">
#include <SPI.h>
#include "SdFat.h"

#define chipSelect xx // pinul la care este conectat cardul (xx = 4 pe shieldul Ethernet, xx = 10 pentru ecrane)

SdFat sd;

void setup() {
  Serial.begin(9600);
  while (!Serial);  
  delay(1000);

  // Pornim cardul; daca nu merge, se pot folosi viteze mai mici de 50Mhz
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd.initErrorHalt(); // afiseaza pe portul serial posibilele motive ale erorii
  }
  else 
  {
    Serial.println("Card ready");  
  }
}
void loop() {}
</source>

O functie utila ar fi cea de afisare a fisierelor si directoarelor existente la o anumita cale:

<source lang="c">
void afisareDirector(char cale[]){
  SdFile dir;
  SdFile file;
  if (!dir.open(cale)){
    Serial.print("Eroare deschidere director: ");
    Serial.println(cale);
  }
  else
  {
    while (file.openNext(&dir, O_RDONLY)) {
        if (!file.isHidden()) {
          
          // afisarea tipului (fisier / director):
          Serial.print((file.isDir() ? "d " : "f "));
          
          // afisarea numelui:
          char nume[100];
          file.getName(nume, 100);
          Serial.print(nume);

          // afisam dimensiunea:
          if (!file.isDir()) {
            Serial.print('(');
            Serial.print(file.fileSize());
            Serial.print(')');
          }

          // alte functii interesante pentru lucrul cu fisiere, gasiti aici: 
          // https://profs.info.uaic.ro/~vcosmin/pagini/resurse_arduino/ImagineCardSD/extras/html/class_file.html

          Serial.println();
        }
        file.close();
      }
  }
}
</source>

In continuare dam trei functii pentru crearea unui fisier si scrierea unui text in interiorul acestuia, pentru citirea textului scris in fisier si una pentru stergerea fisierului:

<source lang="c">
void creareFisier(char nume[], char text[]){
  SdFile file;
  if (sd.exists(nume)) return;
  if (!file.open(nume, O_WRONLY | O_CREAT | O_EXCL)) {
     Serial.println("nu am putut crea fisierul");
     return;
  }  
  file.write(text);
  file.close();
}

void citireDinFisier(char nume[]){
  SdFile file;
  if (!sd.exists(nume)) return;
  if (file.open(nume, O_RDONLY)) {
     char continut[30];       
     file.read(continut,30);     
     Serial.println(continut);     
     file.close();
  }      
}

void stergereaUnuiFisier(char nume[]){ 
  sd.remove(nume);
  // atunci cand vrem sa manipulam structura directoarelor, trebuie sa ne folosim direct de obiectul sd care a fost utilizat la initializarea cardului.
  // pentru a vedea si alte functii de creare directoare / stergere directoare etc. consultati: https://profs.info.uaic.ro/~vcosmin/pagini/resurse_arduino/ImagineCardSD/extras/html/class_sd_file.html
}

</source>

== Exercitii ==

====== Problema 1 [20pt] ======

Realizati un CLI (Comand Line Interface) implementand urmatoarele comenzi ce vor fi date prin intermediul consolei seriale:
* cd - change directory: va schimba directorul curent cu cel dat ca parametru. Directorul dat ca parametru poate fi absolut (pornind din radacina cardului ca de exemplu "/Muzica/Mod" sau relativ la direcotul curent ca de exemplu "./Mod". In final se va afisa directorul curent in consola seriala. [comanda "cd ." va afisa directorul curent]
* mkdir - se va crea un fisier cu numele dat ca parametru (de exemplu comanda "mkdir myFolder") va crea direcotul myFolder in directorul curent.
* rmdir - sterge directorul dat ca parametru daca acesta exista.
* ls - afisarea fisierelor si directoarelor din directorul curent impreuna cu data crearii lor si a dimensiunilor.
* cat - afisarea continutului fisierului dat ca parametru (de exemplu "cat nume_fisier.txt" va afisa in consola seriala contonutul fisierului text dat ca parametru). daca parametrul dat ca parametru este de tipul BMP va afisa transformarea lui in imagine textuala ca in exemplul dat mai sus (puteti utiliza codul nostru dar trebuie sa il integrati in aplicatia voastra).
* echo "something to write into a file" > file.txt va crea fisierul file.txt (sau il va suprascrie daca exista) si va adauga in el continutul dat intre ghilimele.
* find - cauta recursiv pornind din directorul curent un fisier dat ca parametru (de exemplu daca directorul curent este radacina si dau comanda find myFile.txt si acesta se afla in /dir1/dir2/ , imi va afisa "/dir1/dir2/myFile.txt"; evident, cautarea va continua pentru gasirea tuturor fisierelor cu acel nume).
* cp cale1/fisier cale2 copie fisierul "fisier" aflat in directorul "cale1" in directorul "cale2".
* [https://en.wikipedia.org/wiki/Cyclic_redundancy_check CRC] - calcularea CRC-4 (cod cu redundanta ciclica) avand drept polinom generator X<sup>4</sup>+X<sup>2</sup>+X+1.CRCul va fi calculat doar pe continutul fisierului dat ca parametru.

Puncte: cd = 2pt,  mkdir = 1pt,  rmdir = 1pt,  ls = 2pt, cat = 4pt, echo = 2pt, find = 3pt, cp = 1pt, CRC = 4pt !
