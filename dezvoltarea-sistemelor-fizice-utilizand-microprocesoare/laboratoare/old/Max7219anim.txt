<source lang="c">
// Animatie realizata de Cosmin Varlan

// prima oara vom memora pozitiile la care este conectata matricea:
int MOSI_pin = 11;
int SlaveSelect_pin = 10;
int Clock_pin = 13;

int pauza=20;
 
const uint64_t IMAGES[]={0,0x10387cfefeee4400, 0x0066667e66663c18, 0x000f06666e3b0000, 0x006e33333e303038, 0x006e333333330000, 0x001e0c0c0c0e000c, 0x00333333331f0000, 0x001e3333331e0000, 0x10387cfefeee4400, 0};
const int IMAGES_LEN = sizeof(IMAGES)/8;
 
// apoi stabilim cateva zone memorabile din max:
byte max7219_reg_noop        = 0x00; // nu face nimic
byte max7219_reg_digit0      = 0x01; // seteaza primul rand
byte max7219_reg_digit1      = 0x02;
byte max7219_reg_digit2      = 0x03;
byte max7219_reg_digit3      = 0x04;
byte max7219_reg_digit4      = 0x05;
byte max7219_reg_digit5      = 0x06;
byte max7219_reg_digit6      = 0x07;
byte max7219_reg_digit7      = 0x08;
byte max7219_reg_decodeMode  = 0x09;
byte max7219_reg_intensity   = 0x0a;
byte max7219_reg_scanLimit   = 0x0b;
byte max7219_reg_shutdown    = 0x0c;
byte max7219_reg_displayTest = 0x0f;
 
void putByte(byte data) { // trebuie sa scriem bitii din data pe rand, de la stg la dreapta, sincronizat
  for (int i=7; i>=0; i--)
  {  
    digitalWrite(Clock_pin, LOW);   // incepe o scriere sincronizata
    digitalWrite(MOSI_pin, data & (0x01 << i)); // cand i=7 scriu cel mai din stg bit din data...
    digitalWrite(Clock_pin, HIGH);   // a terminat sincronismul
  }
}
 
 
void toMax( byte reg, byte col) {    
  digitalWrite(SlaveSelect_pin, LOW);       // selectez slaveul    
  putByte(reg);                  // ii zic in ce zona de memorie scriu
  putByte(col);                  // si scriu valoarea
  digitalWrite(SlaveSelect_pin,HIGH);       // deselectez slaveul ca sa activez ce am scris
}
 
void setup() {
  Serial.begin(9600);
  pinMode(MOSI_pin, OUTPUT);
  pinMode(Clock_pin,  OUTPUT);
  pinMode(SlaveSelect_pin,   OUTPUT);
 
  digitalWrite(Clock_pin, HIGH);  
 
// cateva setari:
  toMax(max7219_reg_scanLimit, 0x07);      
  toMax(max7219_reg_decodeMode, 0x00);  
  toMax(max7219_reg_shutdown, 0x01);    // nu e in shutdown
  toMax(max7219_reg_displayTest, 0x00); // nu testez nimic
   for (int i=1; i<=8; i++) {    
    toMax(i,0);                         // curat fiecare rand
  }
  toMax(max7219_reg_intensity, 0x00);   // setez intensitatea la minim 
  generateRandomPopulation();                                                
}

int a[8][8], b[8][8];

void resetmatrix(int m[8][8])
{
  for (int i=0; i<8; i++)
     for(int j=0; j<8; j++)
        m[i][j]=0;
}


void generateRandomPopulation()
{
  for(int i=0; i<8; i++)
  for(int j=0; j<8; j++)
  {
    a[i][j]=0;
  }  
  for(int i=0; i<32; i++)
  {
    a[random(0,8)][random(0,8)]=1;
  }
}

void displayMatrix(int m[8][8])
{
   for(int i=0; i<8; i++)
   {
      int val = 0;
      for(int j=0; j<8; j++)
      {
        val |= (m[i][7-j]<<j); 
      }
      toMax(i+1,val);
   }  
}

void displayMatrixUpsideDown(int m[8][8])
{
   for(int i=0; i<8; i++)
   {
      int val = 0;
      for(int j=0; j<8; j++)
      {
        val |= (m[7-i][7-j]<<j); 
      }
      toMax(i+1,val);
   }  
}

int checkCoordinates(int x, int y){
  return ((x>=0) && (x<8) && (y>=0) && (y<8));
}

void AddSquare(int x, int y, int lat, int m[8][8])
{
    if (checkCoordinates(x,y) && checkCoordinates(x+lat-1, y+lat-1))
    {
      for(int i=0; i<lat; i++)
      {
        m[x+i][y]=1;
        m[x][y+i]=1;
        m[x+lat-1][y+i]=1;
        m[x+i][y+lat-1]=1; 
      }
    }              
}

void makeFrame(int pauza, int m[8][8])
{
    displayMatrix(m);
    delay(pauza);
}

void makeFrame2(int pauza, int m[8][8])
{
    displayMatrixUpsideDown(m);
    delay(pauza);
}

void SlowDrawSquare(int x1, int y1, int x2, int y2, int pauza, int m[8][8], int val){
  for(int i=x1; i!=x2; i+=(x1<x2?1:-1))
  {
    m[i][y1]=val;
    makeFrame(pauza,m);
  }
  for(int j=y1; j!=y2; j+=(y1<y2?1:-1))
  {
    m[x2][j]=val;
    makeFrame(pauza,m);
  }  
  for(int i=x2; i!=x1; i+=(x1<x2?-1:1))
  {
    m[i][y2]=val;
    makeFrame(pauza,m);
  }  
  for(int j=y2; j!=y1; j+=(y1<y2?-1:1))
  {
    m[x1][j]=val;
    makeFrame(pauza,m);
  }    
}


void SlowDrawSquare2(int x1, int y1, int x2, int y2, int pauza, int m[8][8], int val){

  for(int i=x1; i!=x2+(x1<x2?1:-1); i+=(x1<x2?1:-1))
  {
    m[i][y1]=val;
    m[x2+x1-i][y2]=val;
    makeFrame(pauza,m);
  }
  for(int j=y1; j!=y2; j+=(y1<y2?1:-1))
  {
    m[x2][j]=val;
    m[x1][y2+y1-j]=val;
    makeFrame(pauza,m);
  }   
}

void anim_center_grow(){
  for(int i=0; i<4; i++)
  {
    AddSquare(i,i,8-i*2,a);
    displayMatrix(a);
    delay(pauza*2);
    resetmatrix(a);
  }
}
void anim_center_shrink(){
  for(int i=3; i>=0; i--)
  {
    AddSquare(i,i,8-i*2,a);
    displayMatrix(a);
    delay(pauza*2);
    resetmatrix(a);
  }    
}


void anim_a(int dir){
  int v1=0, v2=0;
  if (dir==1) v1=1, v2=8;
  if (dir==-1) v1=8, v2=1;  
  for(int i=v1; i!=v2; i+=dir)
  {
    AddSquare(0,0,i,a);
    displayMatrix(a);
    delay(pauza);
    resetmatrix(a);
  }
}

void anim_c(int dir){
  dir*=-1;
  int v1=0, v2=0;
  if (dir==1) v1=0, v2=7;
  if (dir==-1) v1=7, v2=0;  
  for(int i=v1; i!=v2; i+=dir)
  {
    AddSquare(i,i,8-i,a);
    displayMatrix(a);
    delay(pauza);
    resetmatrix(a);
  }  
}


void anim_b(int dir){
  int v1=0, v2=0;
  if (dir==1) v1=0, v2=7;
  if (dir==-1) v1=7, v2=0;  
  for(int i=v1; i!=v2; i+=dir)
  {
    AddSquare(0,7-i,i+1,a);
    displayMatrix(a);
    delay(pauza);
    resetmatrix(a);
  }  
}

void anim_d(int dir){
  int v1=0, v2=0;
  if (dir==1) v1=1, v2=8;
  if (dir==-1) v1=8, v2=1;  
  for(int i=v1; i!=v2; i+=dir)
  {
    AddSquare(8-i,0,i,a);
    displayMatrix(a);
    delay(pauza);
    resetmatrix(a);
  }  
}

void multiplySquareOne(int m[8][8])
{
  for(int i=0; i<4; i++)
    for(int j=0; j<4; j++)
    {
      m[7-j][i]=m[i][j];
      m[7-i][7-j]=m[i][j];
      m[j][7-i]=m[i][j];
    }  
}
void mirrorLeft(int m[8][8])
{
  for(int i=0; i<8; i++)
    for(int j=0; j<4; j++)
    {
      m[i][7-j]=m[i][j];
    }  
}

void anim4(){
  
  int pauza=60;
  for(int k=3; k>=2; k--)
  {
    a[k][k]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);
  }
  for(int k=3; k>=0; k--)
  {
    a[3-k][k]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);
  } 
  for(int dd=0; dd<2; dd++)
  {
    for(int k=0; k<15; k++) {toMax(max7219_reg_intensity, k);delay(40);}
    for(int k=14; k>=0; k--) {toMax(max7219_reg_intensity, k);delay(40);}
  }
  toMax(max7219_reg_intensity, 0x00);

  for(int i=0; i<4; i++)  
    for(int j=0; j<3; j++)  
    {
      a[i][j+1]=a[i][j];
      a[i][j]=0;
    multiplySquareOne(a);
    makeFrame(pauza,a);    
    }    


    a[1][2]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);
    
    a[2][2]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);

    a[2][1]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);

    a[1][1]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);
        

  for(int k=3; k>=0; k--)
  {
    a[3][k]=1;
    a[k][3]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);
  }  
  
  for(int k=3; k>=0; k--)
  {
    a[0][k]=1;
    a[k][0]=1;
    multiplySquareOne(a);
    makeFrame(pauza,a);
  }    



    int sir[16];
    for(int i=0; i<16; i++) sir[i]=i;
    for(int i=0; i<20; i++){
      int p = random(0,16);
      int aux = sir[0];
      sir[0]=sir[p];
      sir[p]=aux;
    }
    for(int i=0; i<16; i++)
    {
      a[sir[i]/4][sir[i]%4]=0;
    multiplySquareOne(a);
    makeFrame(pauza,a);      
    }
   
}


void anim1()
{
  anim_a(1);
  anim_b(-1);
  anim_b(1);
  anim_c(-1);
  anim_c(1);
  anim_d(-1);
  anim_d(1);              
  anim_a(-1);   
}


void anim3()
{
  SlowDrawSquare(0,0,7,7,pauza,a,1);
  SlowDrawSquare(1,1,6,6,pauza,a,1);
  SlowDrawSquare(2,2,5,5,pauza,a,1);
  SlowDrawSquare(3,3,4,4,pauza,a,1);
  SlowDrawSquare(0,0,7,7,pauza,a,0);
  SlowDrawSquare(1,1,6,6,pauza,a,0);
  SlowDrawSquare(2,2,5,5,pauza,a,0);
  SlowDrawSquare(3,3,4,4,pauza,a,0);  
}

void anim2()
{
  SlowDrawSquare2(0,0,7,7,pauza,a,1);
  SlowDrawSquare2(1,1,6,6,pauza,a,1);
  SlowDrawSquare2(2,2,5,5,pauza,a,1);
  SlowDrawSquare2(3,3,4,4,pauza,a,1);
  SlowDrawSquare2(0,0,7,7,pauza,a,0);
  SlowDrawSquare2(1,1,6,6,pauza,a,0);
  SlowDrawSquare2(2,2,5,5,pauza,a,0);
  SlowDrawSquare2(3,3,4,4,pauza,a,0);  
}

void anim5()
{    
  int exista=1;
  while (exista)
  {
    exista=0;
    for(int j=0; j<8; j++)
      if (a[7][j]==0) exista=1;
    if (exista==0) break;
    int poz = random(0,8);
    while(a[7][poz]==1) poz = random(0,8);
    for(int i=7; i>=0; i--)
    {
      a[i][poz]=1;
      if (i>0) a[i+1][poz]=0;
      makeFrame(10,a);
      if(i==0 || a[i-1][poz]==1) break;
    }       
  }
  for(int i=0; i<4; i++)
    for(int j=0; j<4; j++)
    {
      a[i][j]=0;
      multiplySquareOne(a);
      makeFrame(pauza*2,a);         
    }
}



void anim6(){
  int matr[8][IMAGES_LEN*8]; // 8 linii, 56 de coloane
  resetmatrix(a);
  for(int litera=0; litera<IMAGES_LEN; litera++)
  for(int i=7; i>=0; i--)
    for(int j=7; j>=0; j--)
      matr[7-i][8*litera + 7-j]=(IMAGES[IMAGES_LEN-litera-1]>>i*8+j)%2;

  /*for(int i=8; i<IMAGES_LEN*8-8; i++)
  {
    int twoEmptyCols=1;
    for(int j=0; j<8; j++)
      if (matr[j][i]==1 || matr[j][i+1]==1) twoEmptyCols=0;
    if (twoEmptyCols==1)
    {
      for(int k=i+1; k<IMAGES_LEN*8-8; k++)
        for(int j=0; j<8; j++)
          matr[j][k]=matr[j][k+1];
      i--;  
    }      
  }*/
  for(int poz=(IMAGES_LEN-1)*8; poz>=0; poz--)
  {
  for(int i=0; i<8; i++) 
    for(int j=0; j<8; j++)      
      a[i][j]=matr[i][j+poz];
    makeFrame(pauza*2,a); 
    delay(10); 
  }        
}

void anim7(int dir){
  resetmatrix(a);  

  for(int q=0; q<3; q++)
  {
    for(int k=3; k>=0; k--)
    {
      for(int i=0; i<4; i++)
      {
        a[i][i+k]=1;
      }
      mirrorLeft(a);
      if (dir)makeFrame(pauza*2,a); else makeFrame2(pauza*2,a);
    }
  
    for(int k=0; k<8; k++)
    {
    for(int i=7; i>=1; i--)
    {
      for(int j=0; j<8; j++)
      {
        a[i][j]=a[i-1][j];   
      }    
    }
    if (dir)makeFrame(pauza*2,a); else makeFrame2(pauza*2,a);
    }
  
    for(int k=3; k>=0; k--)
    {
      for(int i=0; i<4; i++)
      {
        a[i][i+k]=0;
      }
      mirrorLeft(a);
      if (dir)makeFrame(pauza*2,a); else makeFrame2(pauza*2,a);     
    }  
  
    for(int k=0; k<8; k++)
    {
    for(int i=7; i>=1; i--)
    {
      for(int j=0; j<8; j++)
      {
        a[i][j]=a[i-1][j];   
      }    
    }
    if (dir)makeFrame(pauza*2,a); else makeFrame2(pauza*2,a);
    }
  }   
}


void anim8(){
  resetmatrix(a);
  for(int i=3; i>=0; i--)
  {
    a[i][3]=1;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a); 
  }  
  a[0][2]=a[1][2]=1;
  multiplySquareOne(a);      
  makeFrame(pauza*2,a); 

  a[0][1]=1;
  multiplySquareOne(a);      
  makeFrame(pauza*2,a); 
  
  for(int i=3; i>=0; i--)
  {
    a[i][i]=1;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a); 
  }  
  
  for(int i=3; i>=0; i--)
  {
    a[i][3]=0;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a); 
  }  
  a[0][2]=a[1][2]=0;
  multiplySquareOne(a);      
  makeFrame(pauza*2,a); 

  a[0][1]=0;
  multiplySquareOne(a);      
  makeFrame(pauza*2,a); 
  
  for(int i=3; i>=0; i--)
  {
    a[i][i]=0;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a); 
  }  
}
void anim9(){
  for(int i=0; i<4; i++)
  {
    a[i][0]=1;
    a[0][i]=1;
    multiplySquareOne(a);          
    makeFrame(pauza*3,a);     
  }
  for(int i=3; i>=0; i--)
  {
    a[3-i][3]=1;    
    multiplySquareOne(a);          
    makeFrame(pauza*2,a);     
  }  
  for(int i=3; i>=0; i--)
  {
    a[3][i]=1;    
    multiplySquareOne(a);          
    makeFrame(pauza*2,a);     
  } 
  a[2][1]=1;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a);    
  a[1][1]=1;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a);      
  a[1][2]=1;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a);       
  a[2][2]=1;
    multiplySquareOne(a);          
    makeFrame(pauza*2,a);   
  for(int j=0; j<8; j++)
  for(int i=0; i<8; i+=2)
  {
    a[i][j]=0;
    a[i+1][7-j]=0;
    makeFrame(pauza,a);   
  }        
}

void loop() {
resetmatrix(a);

anim6();
anim2();
anim7(1);
anim1();
anim4();
anim5();
anim3();
anim7(0);
anim8();
anim9();
  
}
</source>
