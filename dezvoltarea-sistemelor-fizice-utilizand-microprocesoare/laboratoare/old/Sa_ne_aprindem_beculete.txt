== Electronica ==

Pentru a putea exploata la maxim puterea unui Arduino, vom avea nevoie sa conectam componente externe la acesta, adica sa formam circuite.
Deci, vom avea nevoie si de cateva cunostinte din domeniul electronicii.
In primul rand, trebuie sa lamurim cateva concepte.

'''Curent electric''' = Purtatori de sarcina electrica(electroni sau ioni) care circula ordonat printr-un material conductiv

'''Circuit electric''' = O retea inchisa de elemente electrice, impartite in doua  mari categorii : surse electrice si consumatori


<table style="width:50% border="1">
  <tr>
    <th>Nume</th>
    <th>Definitie</th> 
    <th>Masurat in </th>
  </tr>
  <tr>
    <td>Amperaj</td>
    <td>Sarcina electrica care circula intr-o anumita sectiune per secunda printr-un material conductiv.</td>
    <td>Amperi (A)</td>
  </tr>
  <tr>
    <td>Voltaj</td> 
    <td>Diferenta de potential electric intre doua puncte (la nivel intuitiv, este "forta" care deplaseaza purtatorii de sarcina )</td>
    <td>Volti (V)</td>
  </tr>
  <tr>
    <td>Rezistenta</td>
    <td>Capacitatea unui material de a se "opune" trecerii curentului</td>
    <td>Ohmi (Î©)</td>
</table>


== Legea lui Ohm ==


Exista o lege care defineste relatia intre aceste 3 valori, si ea se numeste '''Legea lui Ohm'''

   '''V = I * R'''

Observam faptul ca aceste valori sunt inter-dependente, si daca cunoastem valoarea a doua dintre ele, putem afla imediat si pe a treia.

== Echipamentele esentiale ==

Ca sa putem crea circuite, trebuie sa ne familiarizam cu componentele esentiale : breadboard, cabluri, rezistente.


<b>Breadboardul</b> nu este nimic mai mult decat o placa pe care punem firele pentru a crea conexiuni. E recomandat sa folosim liniile lungi pentru alimentare (deobicei marcate cu +/-) si coloanele, mai mici, pentru componentele noastre.

<b>Cablurile</b> sunt destul de evidente. Ele pot fi de mai multe tipuri (tata-tata, mama-mama, tata-mama, crocodili, etc), insa cel mai des vom folosi cabluri tip tata-tata.

<b>Rezistentele</b> sunt niste componente care adauga rezistenta circuitului, adica restrictioneaza cantitatea de curent care trece prin circuit. Ele pot avea diferite valori, in functie de rezistenta fiecareia (masurata in Ohmi). Pentru o recunoastere usoara a valorii se foloseste un cod de culori.

Studiati [http://www.digikey.com/-/media/Images/Marketing/Resources/Calculators/resistor-color-chart.jpg?la=en-US&ts=72364a89-2139-476a-8a54-8d78dacd29ff aceasta poza.]

In continuare, vom construi primul nostru circuit. Vom atasa un LED extern la placuta noastra Arduino.
Pentru a nu arde LED-ul, este nevoie sa atasam un rezistor. Mai jos, avem specificatiile LED-urilor in functie de culoare

<table style="width:50% border="1">
  <tr>
    <th>Culoare LED</th>
    <th>Voltaj (consum)</th> 
    <th>Curent maxim</th>
  </tr>
  <tr>
    <td>Rosu</td>
    <td>2V</td> 
    <td>15mA</td>
  </tr>
  <tr>
    <td>Verde</td>
    <td>2.1V</td> 
    <td>20mA</td>
  </tr>
  <tr>
    <td>Albastru</td>
    <td>3.2V</td>
    <td>25mA</td>
  </tr>
  <tr>
    <td>Alb</td>
    <td>3.2V</td>
    <td>25mA</td>
  </tr>
</table>

Conform acestor specificatii si folosind legea lui Ohm, putem calcula care este rezistorul de care avem nevoie.
Spre exemplu, pentru o sursa de 5V si un LED rosu:

<nowiki>

(5-2)/(15/1000) = 200 Ohm 

</nowiki>

Avem nevoie deci de un rezistor de aproximativ 200 Ohmi. (Nu este necesar sa folosim exact valorile calculate, se pot face si aproximari. De altfel, in comert se gasesc doar anumite valori standard pentru rezistoare) Avem la indemana un rezistor de 220 Ohmi. Mai departe, cum legam componentele intre ele?
Un LED are doua picioare, unul mai lung (numit anod sau "plus") si unul mai scurt (numit catod sau "minus"). Trebuie sa ii conectam plus-ul la unul dintre pinii digitali de la Arduino, iar minusul la pinul GND. (ground, sau impamantare, care este "minusul" placutei Arduino)
Folositi ca exemplu [http://4.bp.blogspot.com/-bSwcT88QabE/UVuMY29lHfI/AAAAAAAAAAw/wyLijXEmafk/s1600/01+Blinky_bb.png schema aceasta.]

== Analog vs. Digital si P.W.M. ==

Am vorbit la [[Curs Pilot]] despre cateva din comenzile de baza ale limbajului Arduino si am folosit functia <b>digitalWrite</b> pentru a lumina un LED.
Astazi, la lista comenzilor de data trecuta adaugam urmatoarele:
<ul>
<li>analogWrite(pin, value) : </li> trimite valoarea value la pinul pin, unde pin este un pin analog sau un pin care suporta operatiunea de PWM, iar value este o valoare in intervalul 0-1023
<li>analogRead(pin) : </li> citeste o valoare de pe un pin analog (returneaza 0-1023)</li>
</ul>

Pentru a intelege aceste functii, trebuie sa intelegem mai intai diferenta dintre analog si digital.
Semnalul analogic este un semnal cu variatie continua intr-un anumit interval (echivalent matematic sint numerele reale).Semnalele digitale pot lua numai valori discrete (echivalent matematic numerele intregi)

'''Semnalul analog''' poate lua o varietate foarte mare de valori ('''in cazul nostru 0-1023'''), pe cand '''semnalul digital binar''' poate lua doar doua valori, anume '''0 si 1 (LOW si HIGH)'''.  Platforma Arduino opereaza intre 0-5V. Semnalul digital este considerat 0 atunci cand valoarea este in intervalul [0, 0.5] si 1 atunci cand este in intervalul [3.5, 5].  Zona dintre ele este nedefinita si poate cauza erori neasteptate.
Din moment ce analogul pare net superior semnalului digital, pentru ca poate exprima o varietate mult mai mare de valori, de ce mai folosim digital? Raspunsul este simplu, si anume faptul ca, in viata de zi cu zi, apar multe interferente in semnalul analog care pot perturba comportamentul sau. Din acest motiv se foloseste digital, intrucat permite o marja de eroare mult mai mare. De asemenea, stocarea,prelucrarea, transmiterea si corectia erorilor se face mai usor.
Conversia Analog-Digital se face cu ajutorul convertoarelor specializate, adesea integrate in hardware. Un astfel de convertor exista si pe placa Arduino.

Conversia Digital-Analog se face, similar, cu ajutorul unor convertoare. Insa, putem realiza un mic 'artificiu' care sa simuleze aceasta conversie. Acest mic artificiu se numeste '''Pulse Width Modulation. (PWM)'''
Fenomenul de PWM apare atunci cand un semnal digital emuleaza un semnal analog prin fluctuatii foarte rapide. Un exemplu real ar fi luminozitatea unui bec. Becul poate fi stins (luminozitate 0%) sau aprins (luminozitate 100%) si noi vrem sa setam luminozitatea la 50%. Nu putem sa setam o luminozitate intre 0 si 100, dar putem sa il stingem si sa il aprindem de multe ori astfel incat, in medie, luminozitatea sa fie de 50%. Atunci cand acest proces este facut in cicluri mici, ochiul uman nu poate reactiona la schimbarile foarte rapide si creaza o medie.

Acelasi exemplu poate fi aplicat si pe ventilatoare, cand vrem sa le controlam intensitatea si functioneaza intrucat ele nu reusesc fizic sa raspunda destul de repede acelor schimbari frecvente si astfel, se face o medie. 
Pe placa Arduino Uno, pinii digitali ce suporta P.W.M. sunt marcati cu "~" (tilda).
Pe placa Arduino Mega, pinii P.W.M. sunt 0-13.
