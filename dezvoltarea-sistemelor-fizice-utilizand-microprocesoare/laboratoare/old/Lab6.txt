== Utilizarea placii de retea ETHERNET ==

[[Fi»ôier:ethernet.jpg|thumb|upright|450px|alt=Shield Ethernet|Shield Ethernet]]

Placa de retea pe care o aveti disponibila pentru Arduino functioneaza utilizand protocolul de comunicare SPI (Serial Peripheral Interface). Acest protocol de comunicare este utilizat pentru comunicarea pe distange foarte mici, de obicei intalnit atunci cand Arduino vrea sa comunice cu diverse shielduri. Comunicarea este sincrona si probabil este cea mai rapida metoda de comunicare de care dispune Arduino.

== Comunicarea SPI ==
Comunicarea SPI este de tip Master/Slave, masterul fiind de obicei microcontrollerul ce controleaza un shield.

In cazul nostru, Master-ul este reprezentat de catre Arduino in timp ce Slave-ul este shieldul Ethernet.

Pentru comunicarea SPI sunt utilizati o serie de pini dedicati si care au roluri clar definite:
* MISO (Master In Slave Out) - este de fapt pinul 12 al Arduino-ului. Asa cum sugereaza si denumirea, aceasta este linia utilizata de slave pentru a trimite date catre master.
* MOSI (Master Out Slave In) - pinul 11 al Arduino, este utilizat pentru ca masterul sa poata trimite date catre slave.
* SCK (Serial Clock) - pentru ca cele doua dispozitive sa poata comunica sincron (dupa cum spuneam mai sus, comunicarea este una sincrona), este nevoie ca masterul sa pulseze la o anumita frecventa reprezentand o cuanta de timp. Slaveul va asculta aceasta pulsatie si va sti ca incepe un nou capitol al comunicarii dintre el si master. SCK in cazul nostru este implementat de pinul 13 al Arduino.
* SS (Slave Select) - Este utilizat de master pentru a selecta diversi slave. Desi in cazul nostru este implementat pe pinul 10, acest lucru nu este obligatoriu. In comunicarea SPI, daca pinul SS este setat pe valoarea LOW atunci Masterul doreste sa comunice cu acel dispozitiv. Ca sa renunte la comunicarea cu acel dispozitiv, se seteaza pinul SS pe high. Ca si exemplu, daca am conectata doua dispozitive care functioneaza pe SPI, acestea vor utiliza aceiasi pini 11,12,13 cu semnificatiile de mai sus dar vor utiliza doi pini SS diferiti - sa zicem 9 si 10 (la 10 sa presupunem ca avem conectat un shield ethernet iar la 9 avem conectat un cititor de carduri MicroSD). Pentru a selecta dispozitivul ce are conectat pinul SS la 9 va trebui sa setam 10 cu high si 9 cu low (in aceasta ordine) - in cazul nostru am selectat cardul MicroSD si comunicarea va fi facuta cu el in timp ce shieldul ethernet va fi ignorat. Pentru a selecta dispozitivul ce are portul SS conectat la pinul 10, se va seta 9 cu high si apoi 10 cu low - in cazul nostru se va opri comunicarea cu cititorul de carduri si se va comunica cu shieldul ethernet.

== Exemplu ==
Shieldurile ethernet de care dispunem au posibilitatea de a comunica nesecurizat (pentru comunicare securizata ar trebui implementate protocoale criptografice si pentru care puterea de calcul a arduinoului nu este suficienta - totusi exista module pentru criptografie special concepute pentru Arduino si care fac doar partea de criptare). Asadar, vom putea sa comunicam doar cu o pagina web nesecurizata - si ca sa fiu sincer, mi-a fost cam greu sa gasesc o astfel de pagina. Iata asadar un exemplu care acceseaza pagina aflata la http://thehtml5quiz.com/ (codul este inspirat din Exemplele disponibile in IDE pentru Arduino - in cazul de fapta WebClient din sectiunea Ethernet):


<source lang="c">


#include <SPI.h>
#include <Ethernet.h>

// aceasta este o adresa MAC setata de noi - in fapt, placa Ethernet nu are o adresa MAC implementata in hardware
// modificati asta random cu numere in hexa (ca sa nu bulversati switchul):
// inchideti si acolada - am creat eroarea ca sa ma asigur ca nu dati doar copy/paste/upload; cititi mai sus !
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };  

// in continuare vom da adresa serverului pe care vrem sa il accesam (utilizand sau nu sistemul DNS):
// IPAddress server(69,163,216,202);  // numeric IP for thehtml5quiz.com (no DNS)
char server[] = "thehtml5quiz.com";    // name address for Google (using DNS)

// In cazul in care sistemul DHCP esueaza in alocarea unei adre IP pentru Arduino, se va folosi urmatoarea adresa
// va trebui totusi sa va asigurati ca face parte din reteaua locala, nu este luat deja de alt calculator sau Arduino si reteaua locala are acces la Internet
IPAddress ip(192, 168, 0, 177);

// Se construieste un obiect de tip EthernetClient:
EthernetClient client;

void setup() {
  Serial.begin(9600);

   // scriptul de aici este blocant: nu trece de acest while decat daca deschideti consola seriala
  while (!Serial) {
    ; 
  }

  // Porneste conexiunea, acceseaza serviciul DHCP si va returna 1 daca i-a fost alocata o adresa IP:
  if (Ethernet.begin(mac) == 0) {
    // in caz ca Ethernet.begin(mac) are valoarea 0 (adica a esuat configurarea DHCP), afisam un mesaj
    Serial.println("Failed to configure Ethernet using DHCP");
    // si se incearca pornirea cu IPul presetat:
    Ethernet.begin(mac, ip);
  }
  // se pare ca ii trebui un timp pentru a porni:
  delay(1000);
  Serial.println("connecting...");


  // daca reuseste sa se conecteze la portul 80 al serverului (WEB), se afiseaza un mesaj si se face cererea HTTP:
  if (client.connect(server, 80)) {
    Serial.println("connected");
    client.println("GET / HTTP/1.1"); // aici putem face si ceva de genul "GET /index.php?variabila1=valoare1&variabila2=valoare 2 HTTP/1.1"...
    client.println("Host: thehtml5quiz.com");
    client.println("Connection: close");
    client.println();
  } else {
    // daca nu a reusit:
    Serial.println("connection failed");
  }
}

void loop() {
  // atunci cand primeste date de la server le va prelua si afisa:
  
  if (client.available()) {
    char c = client.read();
    Serial.print(c);
  }
  // daca serverul a intrerupt conexiunea, oprim si clientul:
  if (!client.connected()) {
    Serial.println();
    Serial.println("disconnecting.");
    client.stop();

    // frecarea mentei la nesfarsit:
    while (true);
  }
}
</source>







Exemplu de cod simplu care doar "da" o adresa statica Arduinoului. 
<source lang="c">


#include <SPI.h>
#include <Ethernet.h>

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };  

IPAddress ip(192, 168, 10, 2);

EthernetClient client;

void setup() {
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  Serial.print(Ethernet.localIP());
}

void loop() {
  // some stuff to do
}
</source>
Pentru a testa, setati static pe calculator IP-ul 192.168.10.1 si cu masca 255.255.255.0 si ar trebui sa puteti executa comanda "ping 192.168.10.2" pe calculatorul dvs si sa primiti raspuns de confirmare de la Arduino.

== Retelistica ==

Cateva informatii despre retele cred ca nu v-ar strica. Vi le prezint la nivel basic, partea avansata ati studiat-o la o alta materie:

==== Aresarea MAC ====
Pentru a se face accesul intre doua dispozitive aflate in aceeasi retea, un switch utilizeaza adresa MAC (Medium Access Control) a placii de retea: acesta va asocia fiecare port cu o anumita adresa MAC. In momentul in care un calculator vrea sa comunice cu un altul va utiliza adresa IP, dar mai intai va incerca si el sa afle MACul destinatiei printr-un protocol denumit ARP (Adress Resolution Protocol). Pentru a vedea ce adrese are calculatorul vostru asociate in tabela ARP puteti executa comanda "arp -a". Adresa MAC a destinatiei ii este utila pentru ca o va trece in informatia de nivel 2 (vezi ISO/OSI sau LLC de la TCP/IP) pentru ca switchul sa nu o trimita tuturor ci numai destinatiei. Din acest motiv este important ca sa aveti adrese MAC diferite pe fiecare dispozitiv - altfel switchul va trimite informatia la toate dispozitivele avand aceeasi adresa MAC. 

==== Adresarea IP ====
La nivel de retea sunt utilizate adresele IP. Vom folosi IPv4 (4 numere in baza 10 intre 0 si 255). Pentru ca doua dispozitive sa fie considerate ca fiind din aceeasi retea trebuie ca atunci cand se face un si logic pe biti intre bitii formand adresa IP si bitii mastii de retea, sa dea aceeasi valoare. De obicei, in retelele mici se foloseste o masca de retea de tipul 255.255.255.0 deci, daca vreti sa aveti doua dispozitive in aceeasi retea, ar trebui ca adresele lor sa difere doar prin ultima valoare. Nu se vor folosi adresele IP aflate la capetele intervalului (cea cu 0 si cea cu 255: cea cu 0 este utilizata pentru ca routerul sa identifice toata reteaua iar cea cu 255 este adresa de broadcast, utilizata pentru ca un mesaj sa fie trimis catre toate calculatoarele din retea). Asadar, daca vreti ca Arduino sa comunice cu PCul, trebuie ca unul sa aiba o adresa de forma 192.168.0.1 iar celalat 192.168.0.2 si, evident, sa fie unite printr-un cablu ethernet (de obicei cel cu 192.168.0.1 este serverul).

Atentie: adresele trebuie sa fie setate static atat pe PC cat si pe Arduino (asta in cazul in care nu vreti sa instalati un server DHCP pe PC - pentru ca pe Arduino nu prea cred ca veti reusi :D).

== Exercitii ==

====== Problema 1 (4pt) ======
Construiti un server WEB (plecand de la exemplele disponibile in IDE) care sa livreze un fisier HTML in care sa fie scrisa timpul in secunde de cand a fost pornit Arduino si pana a fost receptionata cererea http ce a dus la construirea paginii. Testarea se va face in browser-ul unuia dintre calculatoarele din sala.

====== Problema 2 (3pt) ======
Cuplandu-va cu inca o echipa (veti avea nevoie de doua Arduino cu shieldurile ethernet montate) construiti si clientul care sa acceseze serverul WEB de la punctul 1.

====== Problema 3 (3pt) ======

Impreuna cu cealalta echipa, utilizati cele doua Arduino pentru a sincroniza cele doua Arduino in felul urmator: cand primul Arduino deschide ledul, cel de-al doilea il inchide si viceversa. Unul din Arduinouri va comanda deschiderea si inchiderea ledurilor la timpi aleatori iar celalaltul se va sincroniza prin retea cu acesta. Urmatorul cod s-ar putea sa va ajute in acest sens:

======  Problema de anul trecut: ======

Construiti (impreuna cu cealalta echipa) un sistem ce permite comunicarea prin USB over Ethernet de tip P2P: voi putea scrie un text in consola seriala a unui client A, A va trimite lui B care va afisa in consola seriala si viceversa.

Solutie: [[Arduino Chat]]
