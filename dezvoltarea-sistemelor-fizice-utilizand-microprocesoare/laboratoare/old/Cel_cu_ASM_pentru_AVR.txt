== Tipuri de memorie ==

Tipurile de memorie existent in Arduino sunt:
* SRAM (utilizata pentru stocarea variabilelor)
* EEPROM (Memorie ce poate fi stearsa si rescrisa si cre nu se pierde intre reseturi - un ROM ce poate fi rescris)
* Flash (utilizata pentru stocarea programului ce ruleaza - nu se sterge intre reseturi)

=== SRAM: Aflarea memoriei (SRAM) libere ===

Pentru a gasi cata memorie libera mai aveti disponibila pentru variabilele pe care le declarati, puteti utiliza biblioteca MemoryFree carem desi nu este "oficial" inclusa in managerul de biblioteci al IDE-ului Arduino, nu este foarte greu de descarcat si instalat. Initial a fost pusa la adresa https://playground.arduino.cc/Code/AvailableMemory/ , dar o puteti descarca si de la https://github.com/maniacbug/MemoryFree . 

Descarcati arhiva ZIP si instalati-o selectand Sketch -> Include Library -> Add .ZIP Library... 

Un exemplu care a fost dat si la curs este apelul recursiv al unei functii de calcul al sirului lui Fibonacci (varianta cea mai greoaie). Diferenta fata de exemplul de la curs este ca este afisat si numarul apelului pentru a fi mai usor de urmarit felul in care se modifica memoria.

<source lang="c">
#include <MemoryFree.h>
int fibo(int n)
{
  Serial.print("Calcul:");
  Serial.print(n);
  Serial.print("   freeMemory() = ");
  Serial.println(freeMemory());
  if (n<3) return 1;
  return fibo(n-1) + fibo(n-2);
}

void setup() {
  Serial.begin(9600);
  Serial.println(fibo(7));
}

void loop() {}
</source>

=== EEPROM ===

Memoria EEPROM (Electrically Erasable Programmable Read-Only Memory) este de obicei utilizata pentru a tine minte anumite setari sau anumite LOG-uri sau chiar starea aplicatiei. Urmatorul exemplu va demonstra felul in care se tine minte starea aplicatiei (de fapt valoarea unei variabile):

<source lang="c">
#include <EEPROM.h>

byte val = 0;
int adresa = 0;

void setup() {
   Serial.begin(9600);
   val = EEPROM.read(adresa);   
}

void loop() {
  val++;
  EEPROM.write(adresa, val);
  Serial.println(val);
  delay (500);
}
</source>

Valoarea initiala este cea existenta deja in EEPROM la adresa indicata de variabila "adresa" - adica 0. Daca totusi dorim ca sa avem un punct clar de start, am putea sa tinem minte un ID a programului si sa incepem incredementarea de la 0 ori de cate ori valoarea reprezentand IDul nu se regaseste la o adresa prestabilita. Acest mecanism a fost exemplificat in curs.

Dupa cum ati observat, valoarea este stocata doar pe un singur octet - fiind definita drept byte. Daca ati incerca sa o definiti de tip int, ar trebui sa o stocati pe doi octeti. 

=== Memoria Flash ===

Memoria flash este utilizata pentru a stoca programele pe care le realizati. Aceasta memorie nu se sterge daca alimentarea cu curent a Arduino a fost intrerupta. Totusi, starea programului va fi resetata si acesta va fi reluat de la inceput (asta daca nu cumva folositi memoria EEPROM pentru a stoca valorile variabilelor la anumite puncte in timp).

Memoria Flash poate fi rescrisa de un numar limitat de ori. Desi acest numar este destul de mare (aprox 1-2 miliaone de ori), ne-am dori sa va obisnuiti ca atunci cand vreti sa reluati programul de la 0, sa nu-l rescrieti in arduino ci sa apasati butonul de reset existent pe placuta Arduino - in acest fel veti relua programul fara a rescrie memoria flash.

Uneoir, atunci cand nu am suficienta memorie SRAM, pot stoca anumite constante in memoria Flash. Atentie, trebuie sa fie constante; ele nu pot fi schimbate. Iata un exemplu care stocheaza cuvantul "Arduino" in memoria Flash si extrage de acolo mesajul litera cu litera pentru a-l pune in consola seriala:

<source lang="c">
#include <avr/pgmspace.h>

const byte msg[]PROGMEM = 
   {65,114,100,117,105,110,111};
   
void setup() {
   Serial.begin(9600);
   for(int i=0; i<7; i++)
      Serial.print((char)pgm_read_byte(&msg[i]));
}

void loop() {}
</source>


== Porturi ==

Atunci cand vreti sa programati mai rapid pinii Arduino-ului, puteti sa rescrieti direct anumite variabile ce le-au fost asociate. Putem imparti pinii Arduino-ului in 3 zone:
* B = pinii digitali 8-13; zona B contine asadar doar 6 biti: 8,9,10,11,12,13
* C = pinii analogici 0-5; zona C contine asadar doar 6 biti asociati pinilor A0 - A5
* D = pinii digitali 0-7; zona D utilizeaza asadar toti pinii.

Asociati acestor zone exista 3 tipuri de registri pe care ii putem utiliza:
* DDR - permite setarea tipului pinului (daca bitul asociat este 0 atunci pinul este de tip input, daca este 1 atunci este de tip output.
* PORT - permite setarea pinilor in maniera digital write HITH/LOW. Daca se scrie valoarea 1 atunci pinul este HIGH altfel este LOW.
* PIN - citeste valoarea pinilor ce au fost setati pe input din acea zona. Va returna un octet cu valori 1 sau 0.

Urmatorul cod face exact acelasi lucru pe care il face si programul blink dar utilizand acesti registri:
<source lang="c">
void setup() {
   DDRB = B00100000;
}

void loop() {
  PORTB ^= B00100000; // se face XOR pe bitul reprezentand pinul 13 (al cincilea din zona B).
  delay (1000);
}
</source>

== ASM pentru AVR ==

Probabil ca deja stiti ca cea mai rapida executie cu putinta este cea a codului scris direct in limbaj de asamblare. Acest lucru este valabil si pentru procesoarele Arduino care ruleaza un limbaj de asamblare special simplificat pentru nevoie acestui procesor denumit AVR Assembly. Despre acest limbaj puteti citi detalii fie in continuare, fie aici: 

* https://ucexperiment.wordpress.com/2016/03/19/arduino-inline-assembly-tutorial-8-math/
* http://www.rjhcoding.com/avr-asm-tutorials.php
* https://www.cse.unsw.edu.au/~cs2121/AVR/AVR-Assembler-Tutorial.pdf
* http://academy.cba.mit.edu/classes/embedded_programming/doc1022.pdf

Instructiunile specifice ASM vor fi scrise ca parametru al unei comenzi "asm". Iata cel mai simplu exemplu ce ar putea fi dat, exemplu ce nu face nimic:

<source lang="c">
void setup() {
   asm("nop \n"); // nop nu face nimic, doar blocheaza procesorul pentru cateva nanosecunde...
}
void loop() {}
</source>

Daca va intrebati de ce ati dori sa blocati procesorul pentru cateva nanosecunde scriind NOP-uri, amintiti-va spre exemplu de bada de neopixeli din [[Cel_cu_NeoPixelii]] in care era necesara cronometrarea unor intervale de 0.35 microsecunde (de exemplu) pana la trimiterea urmatorului bit/biti, lucru ce este imposibil la nivel de comenzi Arduino (delay() sau delayMicroseconds()). Totusi, acest lucru este realizabil prin scrierea unui numar de NOP-uri consecutive, asa cum este de fapt facut si in biblioteca utilizata de voi atunci cand ati utilizat banda de neopixeli.

Exista 31 de registri ce pot fi utilizato de catre Arduino: de la r0 la r31. Totusi, programatorilor li se permite accesul doar la registrii de la 16 la 31.

Comanda asm are urmatorul format:

<source lang="c">
asm(code : output list : input list : clobber list);
</source>

Unde:
* code - este o zona formata de comenzi ASM (ca de exemplu NOP). Fiecare comanda este scrisa ca un sir de caractere independent si care se termina cu \n;
* output list - valoarea returnata este de fapt o valoare ce este scrisa intr-un registru ce este asociat unei variabile;
* input list - este de asemenea o lista cu valori asociate unor registri din care se pot citi date;
* clobber list - este o lista a registrilor folositi de catre codul ASM, lista necesara pentru ca procesorul sa fie fortat sa isi mute eventualele date pe care le are stocate in acei registri in alta zona de memorie. 

=== Comenzi ASM pentru AVR si exemplificari ===

==== NOP ====

Comanda NOP nu face nimic, doar sare un ciclu de procesor avand ca efect realizarea unei pauze de cateva nanosecunde (un NOP = 62.5 nanosecunde pentru un procesor de 16Mhz - de fapt se pierde un ciclu-procesor). 


==== LDI ====

Load Immediate are rolul de a incarca o valoare intr-un registru. Spre exemplu, pentru a incarca valoarea 123 in regitrul r24 se poate executa:

<source lang="c">
asm("ldi r24,123 \n");
</source>

Evident, comanda este inutila daca nus tim ce se intampla mai departe cu registrul r24. Poate am dori sa il asociem ulterior unei variabile, ca in exemplul de la comanda urmatoare:

==== STS ====

Copie valoarea dintr-un registru la o adresa din memoria SRAM. Pentru a forta definirea in SRAM a variabilei "val" din exemplul urmator, s-a adaugat cuvantul volatile. Daca acest lucru nu ar fi fost facut, procesorula r fi putut sa asocieze spre exemplu variabila direct cu un registru si sa nu mai doreasca stocarea in memoria sram a variabilei, in acest fel optimizand codul.

In comanda STS data in exemplu, primul parametru este adresa spre care pointeaza variabila "val". Din acest motiv, scrierea valorii registrului r24 la aceasta adresa are ca efect modificarea variabilei care initial a fost declarata ca avand valoarea 0 si ulterior, la afisare are valoarea 123 (cea scrisa de LDI in registrul r24 ce a fost ulterior copiat la adresa variaabilei "val":

<source lang="c">
volatile byte val = 0;
void setup() {
   Serial.begin(9600);
   asm("LDI r24,123 \n"   // scrie valoare 123 in registrul 24
       "STS (val),r24 \n" // scrie valoarea din registrul 24 la adresa variabilei val
      );
   Serial.print("val=");
   Serial.println(val);
}
 
void loop() {}
</source>

Registrii pot retine doar cate 8 biti. Pentru a putea spre exemplu manipula o valoare de tip int, ar trebui sa folositi doi registri pentru a memora valoarea. Arduino foloseste o prezentare interna de tip Little-Endian. Asta inseamna ca , daca as vrea sa memorez valoarea 0x1234 intr-un int, primul octet va retine 0x34 in timp ce al doilea va memora 0x12. Sa scriem aceasta valoare intr-un int (pentru ca mai inainte am scris un byte).

<source lang="c">
volatile int val = 0;
void setup() {
   Serial.begin(9600);
   asm("LDI r24, lo8(0x1234) \n"
       "LDI r25, hi8(0x1234) \n"
       "STS (val), r24 \n" 
       "STS (val+1), r25 \n" 
      :::"r24","r25");
   Serial.print("val=");
   Serial.println(val, HEX);
}

void loop() {}
</source>

Puteti observa ca pentru a prelua cei mai "low" 8 biti am folosit lo8 si aceasta mi-a intors valoarea 34 pe care am pus-o de fapt chiar la inceputul adresei de memorie a lui val, hi8 punandu-l la adresa imediat urmatoare in memorie.

In plus, in acest exemplu am scris si care au fost registrii utilizati. Acest lucru este de fapt foarte important (desi a fost "uitat" in exemplele precedente). Motivul este ca daca procesorul stocheaza ceva prin acesti registrii, codul nostru ar putea sa suprascrie ce a memorat el acolo. Scriindu-i ce registri folosim in zona de "clubber list", il ajutam spunandu-i de fapt ca avem nevoie de acei registri si ca este rugat sa isi mute informatiile pastrate acolo (e treaba lui unde le muta).

==== MOV ====

[[Fișier:Constraints_asm.jpg|thumb|upright|400px|alt=ASM Constraints.|ASM Constraints.]]

Atunci cand vrem sa folosim parametri de intrare / iesire, variabile respective vor fi asociate conform unori reguli unor registri. Lista regulilor o gasiti in imaginea alaturata. De exemplu, daca folosim litera r ca si constrangere, vom permite asocierea respectivei variabile cu oricare dintre registri. In plus, acesti modificatori pot avea o serie de simboluri inaintea lor avand semnificatiile:

* = - acest operand va fi scris
* + - acest operand poate fi citit sau scris. Daca nu e cu egal sau cu plus, operandul poate fi doar citit.
* & - earlyclobber
* % - operatorul este comutativ

Detalii la: https://gcc.gnu.org/onlinedocs/gcc/Modifiers.html#Modifiers


Sa vedem urmatorul exemplu:
<source lang="c">
volatile byte a = 1;
volatile byte b = 2;
void setup() {
   Serial.begin(9600);
   asm("mov r24, %2 \n"
       "mov %0, %3 \n"
       "mov %1, r24 \n"
       : "=r" (a), "=r" (b) : "r" (a), "r" (b): "r24"
   );
   Serial.print("a=");
   Serial.println(a);
   Serial.print("b=");
   Serial.println(b);   
}
 
void loop() {}
</source>

Aici am facut o operati de interschimbare intre variabilele a si b. Ca si valoare auxiliara in algoritmul celor trei scaune am folosit registrul r24. Comanda mov utilizata ma ajuta ca sa copii continutul unui registru in celalalt registru. 

Vom incepe cu sfarsitul (ultilma linie din comanda asm): ultimul parametru de acolo este "r24" asta ii spune procesorului ca trebuie sa lase nefolosit registrul r24 pentru ca il vom suprascrie. Primul parametru este "=r" (a), "=r" (b); compilatorul va asocia un registru ce poate fi identificat prin %0 primului parametru: a. Faptul ca exista simbolul "=" va permite scrierea in acest registru %0 (el de fapt este un registru din 0-31, ales de catre procesor... doar noi il identificam cu %0) sa scriem o valoare si aceasta valoare se va regasi in variabila a dupa executia codului. La fel se intampla si cu b care de data asta va avea registrul %1. si el putand fi suprascris. urmatorul parametru "r" (a), "r" (b) va asocia cate un nou registru lui a si lui b : %2 respectiv %3 (ei sunt dati in ordine). Totusi acestia nu pot fi suprascrisi, sau e inutil sa fie suprascrisi, ei fiind date de intrare. MOV-urile din codul efectiv copie continutul lui a in registrul r24, apoi pe b in a si apoi ce aveam stocat in r24 inapoi in b. In final, cele doua valori a si b vor fi inversate.

Daca parametrul de intrare nu este byte ci int (pe doi octeti), cei doi octeti se vor regasi in %A0 si %B0.

==== INC ====

Folosit pentru a incrementa valoarea dintr-un registru:

<source lang="c">
volatile byte a = 1;
void setup() {
   Serial.begin(9600);
   asm("inc %0 \n"
       : "+r" (a)
   );
   Serial.print("a=");
   Serial.println(a);  
}
void loop() {}
</source>

==== DEC ====

Evident (dupa ce ati citit INC)

==== RJMP ====

Sare la o eticheta si continua executia codului de acolo. Saltul poate fi facut inspre inainte sau inspre inapoi. Daca eticheta are valoarea 2, atunci, daca se doreste saltul inapoi se va face rjmp 2b (si aceasta comanda trebuie pusa dupa eticheta) sau daca se doreste saltul inainte se va face rjmp 2f si asta trebuie sa apara inaintea etichetei, ca in exemplul urmator in care se sare peste doua linii de incrementare:

<source lang="c">
volatile byte a = 1;
void setup() {
   Serial.begin(9600);
   asm("inc %0 \n"
       "inc %0 \n"
       "rjmp 2f \n"
       "inc %0 \n" // sare peste asta
       "inc %0 \n" // sare peste asta
       "2:     \n"       
       : "+r" (a)
   );
   Serial.print("a=");
   Serial.println(a);  
}
void loop() {}
</source>

==== BREQ ====

Evident, cu ajutorul jump-ului se pot realiza bucle, dar trebuie s avem grija sa nu fie infinite. Trebuie sa avem pe undeva o portita care sa ma faca sa ies din bucla. Exista mai multe tipuri de Jumpuri conditionale. Dam in continuare un singur exemplu:



<source lang="c">
volatile byte a = 2; // a se testa si cu valoarea 3
void setup() {
   Serial.begin(9600);
   asm("dec %0 \n"
       "dec %0 \n"
       "breq 2f \n" 
       "inc %0 \n" 
       "inc %0 \n" 
       "2:     \n"       
       : "+r" (a)
   );
   Serial.print("a=");
   Serial.println(a);  
}
void loop() {}
</source>

Cum ar arata atunci un for cu n pasi (in care sa zicem ca il shiftam pe a la stanga cu cate un bit ca sa se inmulteasca cu 2 de fiecare data) - in acest mod vom calcula 2 la puterea n:

<source lang="c">
volatile byte a = 1; 
volatile byte n = 5;
void setup() {
   Serial.begin(9600);
   asm("1:       \n"
       "lsl %0   \n"
       "dec %1   \n"
       "breq 2f  \n" // termina daca n a ajuns la 0
       "rjmp 1b  \n" // mai shifteaza o tura pe a si decrementeaza pe n
       "2:       \n"
       : "+r" (a) : "r" (n)
   );
   Serial.print("a=");
   Serial.println(a);  
}
void loop() {}
</source>

Asa cum v-ati dat seama, LSL are rolul de a shifta la stanga (si are ca efect inmultirea valorii cu 2 - atentie la cat de mult o inmultim) in timp ce LSR are rolul de a shifta la dreapta cu 1 bit si are ca erect imaprtirea la 2.

==== LSL, LSR ====

Vezi exemplul anterior si explicatiile de acolo.

== Documentatie ==

AICI: https://ucexperiment.wordpress.com/2016/03/07/arduino-inline-assembly-tutorial-2/

si AICI: http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-0856-AVR-Instruction-Set-Manual.pdf

(in alta parte pe Internet nu cred ca gasiti... dar daca gasiti, ziceti-mi si mie)

== Exercitii ==

====== Problema 1 ======

Construiti un exemplu care sa permita persistenta unei variabile de tip int intre doua sesiuni ale Arduino-ului. Folositi memoria EEPROM pentru stocarea valorii variabilei si incrementti-o in fiecare secunda (initial numaratoarea va porni de la 0 - vezi exemplu de la curs). Daca alimentarea Arduino-ului cu curent electric va fi intrerupt sau daca va fi apasat butonul "reset", numaratoarea trebuie sa continue de unde a ramas. (atentie: daca scoateti Arduino in timp ce fereastra de afisare seriala este deschisa, aceasta va bloca portul la care era conectat Arduino-ul in sesiunea anterioara si va forta Arduino sa isi gaseasca alt port liber).

====== Problema 2 ======

Demonstrati ca, intr-adevar stocarea de constante in memoria Flash nu ocupa spatiu din memoria SRAM.

====== Problema 3 ======

Date doua numere a si b, sa se afiseze 1 daca a>b, 0 daca a=b si 2 daca a<b. Programul va fi facut in assembler, singura partea care nu este in assembler este data aici, in continuare:

<source lang="c">
volatile int a = 1;  // valori ce pot fi modificate de catre laborant
volatile int b = 5;  // valori ce pot fi modificate de catre laborant
volatile int r;
void setup() {
   Serial.begin(9600);
   asm(
    ...............
    ...............
    ...............
   );
   Serial.print("result=");
   Serial.println(r);  
}
void loop() {}
</source>


====== Problema 4 ======

Implementati in ASM o metoda de sortare (la alegere).


====== Problema 5 ======

Numarati de cate ori apare caracterul spatiu intr-un sir (in asm).
